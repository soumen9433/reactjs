"use strict";
// a "normal" marker that uses a static image as an icon.
// large numbers of markers of this type can be added to the map
// very quickly and efficiently
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOMServer = require("react-dom/server");
var get_dom_marker_icon_1 = require("./utils/get-dom-marker-icon");
var get_marker_icon_1 = require("./utils/get-marker-icon");
// export the Marker React component from this module
class Marker extends React.Component {
    // change the position automatically if the props get changed
    componentWillReceiveProps(nextProps) {
        if (nextProps.lat !== this.props.lat || nextProps.lng !== this.props.lng) {
            this.setPosition({
                lat: nextProps.lat,
                lng: nextProps.lng
            });
        }
    }
    // remove the marker on unmount of the component
    componentWillUnmount() {
        const { map } = this.context;
        if (this.marker) {
            map.removeObject(this.marker);
        }
    }
    render() {
        const { map } = this.context;
        if (map && !this.marker) {
            this.addMarkerToMap();
        }
        return null;
    }
    addMarkerToMap() {
        const { map, } = this.context;
        const { children, bitmap, lat, lng, } = this.props;
        let marker;
        if (React.Children.count(children) > 0) {
            // if children are provided, we render the provided react
            // code to an html string
            const html = ReactDOMServer.renderToStaticMarkup((React.createElement("div", { className: "dom-marker" }, children)));
            // we then get a dom icon object from the wrapper method
            const icon = get_dom_marker_icon_1.default(html);
            // then create a dom marker instance and attach it to the map,
            // provided via context
            marker = new H.map.DomMarker({ lat, lng }, { icon });
            map.addObject(marker);
        }
        else if (bitmap) {
            // if we have an image url and no react children, create a
            // regular icon instance
            const icon = get_marker_icon_1.default(bitmap);
            // then create a normal marker instance and attach it to the map
            marker = new H.map.Marker({ lat, lng }, { icon });
            map.addObject(marker);
        }
        else {
            // create a default marker at the provided location
            marker = new H.map.Marker({ lat, lng });
            map.addObject(marker);
        }
        this.marker = marker;
    }
    setPosition(point) {
        this.marker.setPosition(point);
    }
}
// define the context types that are passed down from a <HEREMap> instance
Marker.contextTypes = {
    map: React.PropTypes.object
};
exports.Marker = Marker;
// make the Marker component the default export
exports.default = Marker;
